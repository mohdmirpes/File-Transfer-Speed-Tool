#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <time.h>

#define PORT 5001
#define BUFFER_SIZE 4096
#define MAX_CLIENTS 5

void *handle_client(void *arg) {
    int client_socket = *(int *)arg;
    free(arg);

    char buffer[BUFFER_SIZE];
    char command[10];
    char filename[256];
    ssize_t bytes;

    // Receive command: "UPLOAD" or "DOWNLOAD"
    bytes = recv(client_socket, command, sizeof(command) - 1, 0);
    if (bytes <= 0) {
        perror("Failed to receive command");
        close(client_socket);
        return NULL;
    }
    command[bytes] = '\0';

    // Receive filename
    bytes = recv(client_socket, filename, sizeof(filename) - 1, 0);
    if (bytes <= 0) {
        if (bytes == 0) {
            fprintf(stderr, "Client closed connection before sending filename.\n");
        } else {
            perror("Failed to receive filename");
        }
        close(client_socket);
        return NULL;
    }
    filename[bytes] = '\0';

    // Process upload
    if (strcmp(command, "UPLOAD") == 0) {
        FILE *file = fopen(filename, "wb");
        if (!file) {
            perror("Failed to open file for writing");
            close(client_socket);
            return NULL;
        }

        printf("Receiving file: %s\n", filename);
        struct timespec start, end;
        long total_bytes = 0;
        clock_gettime(CLOCK_MONOTONIC, &start);

        while ((bytes = recv(client_socket, buffer, BUFFER_SIZE, 0)) > 0) {
            fwrite(buffer, 1, bytes, file);
            total_bytes += bytes;
        }

        clock_gettime(CLOCK_MONOTONIC, &end);
        fclose(file);
        close(client_socket);

        double time_taken = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;
        double speed = (total_bytes / (1024.0 * 1024.0)) / time_taken;

        printf("Upload complete: %s, %.2f MB, %.2f sec, %.2f Mbps\n",
               filename, total_bytes / (1024.0 * 1024.0), time_taken, speed);
    }
    // Process download
    else if (strcmp(command, "DOWNLOAD") == 0) {
        FILE *file = fopen(filename, "rb");
        if (!file) {
            char *msg = "ERROR: File not found\n";
            send(client_socket, msg, strlen(msg), 0);
            close(client_socket);
            return NULL;
        }

        printf("Sending file: %s\n", filename);
        struct timespec start, end;
        long total_bytes = 0;
        clock_gettime(CLOCK_MONOTONIC, &start);

        while ((bytes = fread(buffer, 1, BUFFER_SIZE, file)) > 0) {
            send(client_socket, buffer, bytes, 0);
            total_bytes += bytes;
        }

        clock_gettime(CLOCK_MONOTONIC, &end);
        fclose(file);
        close(client_socket);

        double time_taken = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;
        double speed = (total_bytes / (1024.0 * 1024.0)) / time_taken;

        printf("Download complete: %s, %.2f MB, %.2f sec, %.2f Mbps\n",
               filename, total_bytes / (1024.0 * 1024.0), time_taken, speed);
    } else {
        printf("Invalid command received: %s\n", command);
        close(client_socket);
    }

    return NULL;
}

int main() {
    int server_socket, *client_socket;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_size = sizeof(client_addr);
    pthread_t tid;

    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    if (listen(server_socket, MAX_CLIENTS) < 0) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", PORT);

    while (1) {
        client_socket = malloc(sizeof(int));
        *client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &addr_size);
        if (*client_socket < 0) {
            perror("Accept failed");
            free(client_socket);
            continue;
        }

        printf("Connection accepted from %s\n", inet_ntoa(client_addr.sin_addr));
        pthread_create(&tid, NULL, handle_client, client_socket);
        pthread_detach(tid);
    }

    close(server_socket);
    return 0;
}
